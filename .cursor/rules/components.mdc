---
description: 
globs: components/**/*tsx
alwaysApply: false
---
## Component Creation Guidelines

You should always write Storybook stories if you create a new components or if you are updating older components.

### Folder Structure
- Create folder with kebab-case name (e.g., `price-card`)

### Required Files
1. **ComponentName.stories.tsx** (PascalCase)
   ```tsx
   import React from 'react';
   import { Meta, StoryFn } from '@storybook/react';
   import ComponentName, { ComponentNameProps } from './ComponentName';
   
   export default {
     title: 'Components/ComponentName',
     component: ComponentName,
   } as Meta;
   
   const Template: StoryFn = (args) => <ComponentName {...args} />;
   
   export const Default = Template.bind({});
   Default.args = {
     // Component-specific props
   };
   ```

2. **ComponentName.tsx** (PascalCase)
   ```tsx
   'use client';
   
   import React from 'react';
   
   export type ComponentNameProps = {
     // Define component props here
   };
   
   const ComponentName: React.FC<ComponentNameProps> = (props) => {
     return (
       // Component JSX
     );
   };
   
   export default ComponentName;
   ```

3. **index.tsx**
   ```tsx
   export { default, type ComponentNameProps } from './ComponentName';
   ```

### Example
For a `feature-card` component:
- Folder: `feature-card/`
- Files:
  - `FeatureCard.stories.tsx`
  - `FeatureCard.tsx`
  - `index.tsx`

  ### Wrtiting play functions in storybook stories:

  We are using storybook play functionality to test components. Each components story should include such tests. Here is an example how we write those tests.

```tsx
import type { Meta, StoryObj } from '@storybook/react';

import { userEvent, within } from '@storybook/test';

import { RegistrationForm } from './RegistrationForm';

const meta: Meta<typeof RegistrationForm> = {
  component: RegistrationForm,
};

export default meta;
type Story = StoryObj<typeof RegistrationForm>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
   ```
