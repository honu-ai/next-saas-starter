---
description: 
globs: 
alwaysApply: true
---
# Honu SAAS Starter Development Guidelines

## Folder
Build the application in the 'Dashboard' Folder.

## Stack
- JavaScript/TypeScript
- Node.js
- React
- Next.js App Router
- Tailwind CSS
- PostgreSQL with Drizzle ORM
- Package manager: pnpm (not npm)

## Code Style

```typescript
// ‚úÖ Good: Functional approach
const calculateTotal = (items) => items.reduce((sum, item) => sum + item.price, 0);

// ‚ùå Avoid: Class-based approach
class Calculator {
  calculateTotal(items) {
    return items.reduce((sum, item) => sum + item.price, 0);
  }
}
```

## File Structure
Components folder structure:
```
components/
  ui/                    # shadcn components
  feature-name/          # kebab-case folder
    ButtonFeature.tsx    # PascalCase component
    ButtonFeature.stories.tsx
    index.tsx            # exports
```

## Naming Patterns

- üìÅ Directories: `kebab-case` (e.g., `user-profile`)
- üî§ Variables/Functions: `camelCase` (e.g., `getUserData`)
- üß© Components: `PascalCase` (e.g., `UserProfile`)
- üìÑ Component files: `PascalCase.tsx` (e.g., `UserProfile.tsx`)
- üìÑ Other files: `kebab-case.ts` (e.g., `api-utils.ts`)
- üß© Component prefixing: `TypeName` (e.g., `ButtonAccount`, `CardAnalyticsMain`)

## TypeScript Types

```typescript
// Always define prop types
type ButtonProps = {
  variant: 'primary' | 'secondary';
  onClick: () => void;
  children: React.ReactNode;
  isDisabled?: boolean;
};

const Button: React.FC<ButtonProps> = ({ 
  variant, 
  onClick, 
  children,
  isDisabled = false
}) => {
  // implementation
};
```

## Component Structure

```typescript
// index.tsx
export { default, type CardProps } from './Card';

// Card.tsx
'use client'; // Only when necessary!

import { useState } from 'react';
import { Button } from '@/components/ui/button';

export type CardProps = {
  title: string;
  description: string;
};

const Card: React.FC<CardProps> = ({ title, description }) => {
  return (
    <div className="rounded-lg p-4 shadow-md">
      <h3 className="text-lg font-medium">{title}</h3>
      <p className="mt-2 text-gray-600">{description}</p>
    </div>
  );
};

export default Card;
```

## Server vs Client Components

```typescript
// ‚úÖ Server Component (default)
const ProductList = async () => {
  const products = await fetchProducts();
  
  return (
    <div>
      {products.map(product => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
};

// ‚ö†Ô∏è Client Component (only when needed)
'use client';

import { useState } from 'react';

const SearchBar = () => {
  const [query, setQuery] = useState('');
  
  return (
    <input 
      type="text" 
      value={query} 
      onChange={(e) => setQuery(e.target.value)} 
    />
  );
};
```

## Data Fetching

```typescript
// ‚úÖ Server component data fetching
const Dashboard = async () => {
  const data = await fetch('https://api.example.com/data', { next: { revalidate: 60 } })
    .then(res => res.json());
  
  return <DashboardUI data={data} />;
};
```

## Package Management
```bash
# ‚úÖ Use pnpm for all package operations
pnpm install shadcn-ui
pnpm add -D @types/react

# ‚ùå Avoid npm commands
# npm install (don't use)
```
## Opening a new terminal
Always run on opening of the terminal: 
```bash
nvm use --lts
```

## Component Testing

```tsx
// ComponentName.stories.tsx
import { Meta, StoryObj } from '@storybook/react';
import Button from './Button';

const meta: Meta<typeof Button> = {
  title: 'Components/Button',
  component: Button,
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof Button>;

export const Primary: Story = {
  args: {
    variant: 'primary',
    children: 'Click Me',
  },
};
```

## Key Performance Rules

1. Minimize `'use client'` directives
2. Use React Server Components by default
3. Implement code splitting with `dynamic` imports
4. Optimize images with `next/image`
5. Use Suspense boundaries for loading states